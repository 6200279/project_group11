Index: project_group11/terraingenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package project_group11;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.util.Random;\nimport java.util.HashMap;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\n\nimport java.util.Objects;\n\n\npublic final class terraingenerator\n{\n    public static final Color CITY = new Color(214,217,223);\n    public static final Color DESERT = new Color(255,204,102);\n    public static final Color DIRT_ROAD = new Color(153,102,0);\n    public static final Color FOREST = new Color(0,102,0);\n    public static final Color HILLS = new Color(51,153,0);\n    public static final Color LAKE = new Color(0,153,153);\n    public static final Color MOUNTAINS = new Color(102,102,255);\n    public static final Color OCEAN = new Color(0,0,153);\n    public static final Color PAVED_ROAD = new Color(51,51,0);\n    public static final Color PLAINS = new Color(102,153,0);\n\n    private static final int DEFAULT_HEIGHT = 80;\n\n    private static final int DEFAULT_WIDTH = 120;\n\n\n\n    static class MyCoord{\n        private int X;\n        private int Y;\n\n        public MyCoord() {\n            this(0,0);\n        }\n        public MyCoord(int X, int Y) {\n            this.X = X;\n            this.Y = Y;\n        }\n        public int getX() {\n            return X;\n        }\n        public int getY() {\n            return Y;\n        }\n        public void setX(int X) {\n            this.X = X;\n        }\n        public void setY(int Y) {\n            this.Y = Y;\n        }\n    }\n\n\n    public static class Map<Terrain_map> extends JPanel\n    {\n\n\n\n        Scenario scenario = new Scenario(\"testmap.txt\");\n        ArrayList<Area>walls = scenario.getWalls() ;\n        ArrayList<TelePortal>telePortals = scenario.teleports ;\n        ArrayList<Area>shaded = scenario.shaded ;\n        HashMap<String, MyCoord> map = new HashMap<String,MyCoord>();\n\n\n\n        private static int height;\n\n\n        private static int width;\n\n        private static double z;\n\n        public  Map(int height, int width, double z)\n        {\n            this.height = height;\n            this.width = width;\n            this.z = z;\n        }\n        public static  List<Point> Terrain_mapper (){\n            List<Point> FOREST_points = new ArrayList<>();\n            List<Point> HILLs_points = new ArrayList<>();\n            List<Point> Desert_points = new ArrayList<>();\n            List<Point> LAKE_points = new ArrayList<>();\n            List<Point> MOUNTAINS_points = new ArrayList<>();\n            List<Point> PLAINS_points = new ArrayList<>();\n            List<Point> SNOW_points = new ArrayList<>();\n         for (int i = 0; i < width; ++i)\n             { // y\n                for (int j = 0; j < height; ++j) { // x\n                    double x = (double) j / ((double) width);\n                    double y = (double) i / ((double) height);\n                    double n = noise(10 * x, 10 * y, z);\n\n\n            if (n < 0.25) {\n                // FOREST\n                FOREST_points.add(new Point(j,i));\n                System.out.println(\"forestpoints:\"+FOREST_points.size());\n\n\n            } else if (n >= 0.25 && n < 0.30) {\n               // HILLS\n                HILLs_points.add(new Point(j,i));\n            }\n            // DESERT\n            else if (n >= 0.30 && n < 0.40) {\n\n                Desert_points.add(new Point(j,i));\n\n\n            } else if (n >= 0.40 && n < 0.5) {\n              //LAKE\n                LAKE_points.add(new Point(j,i));\n            } else if (n >= 0.5 && n < 0.70) {\n                // PLAINS\n                PLAINS_points.add(new Point(j,i));\n            } else if (n >= 0.70 && n < 0.75) {\n                // FOREST\n                FOREST_points.add(new Point(j,i));\n            }\n            // MOUNTAINS\n            else if (n >= 0.75 && n < 0.85) {\n\n                MOUNTAINS_points.add(new Point(j,i));\n            }\n            // Ice (or Snow)\n            else {\n\n                SNOW_points.add(new Point(j,i));\n                System.out.println(\"Snowpoints:\"+SNOW_points.size());\n            }\n        }\n    }\n\n       return SNOW_points; }\n\n\n\n        public static void main(String[] args)\n        {\n            List<Point> points = new ArrayList<>();\n            points.add(new Point (1,2));\n            points.toString();\n\n\n            int height = DEFAULT_HEIGHT;\n            int width = DEFAULT_WIDTH;\n            //long seed = System.currentTimeMillis();\n            long seed =100;\n            if (args.length == 3)\n            {\n                height = Integer.parseInt(args[0]);\n                width = Integer.parseInt(args[1]);\n                seed = Long.parseLong(args[2]);\n            }\n\n            //List<Point>snowpoints = Terrain_mapper();\n            //System.out.println(snowpoints.size());\n\n            Map terrain = new Map(height, width, z);\n            List<Point> snow = Map.Terrain_mapper();\n            System.out.println(snow.size());\n\n\n            Random rand = new Random(seed);\n            double z = rand.nextDouble();\n\n            JFrame window = new JFrame();\n            window.setSize(width * 7, height * 7);\n            window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            window.getContentPane().add(terrain);\n            window.setVisible(true);\n            window.setTitle(\"Seed: \" + seed);\n        }\n\n\n\n\n        public void paint(Graphics g)\n        {\n\n            for (int i = 0; i < width; ++i)\n            { // y\n                for (int j = 0; j < height; ++j)\n                { // x\n                    double x = (double)j / ((double)width);\n                    double y = (double)i / ((double)height);\n                    double n = noise(10 * x, 10 * y, z);\n\n                    // Watter (or a Lakes)\n\n                    if (n < 0.25)\n                    {\n                        g.setColor(FOREST);\n\n                        map.put(\"FOREST\",new MyCoord(j,i));\n\n\n\n                    }\n                    else if (n>= 0.25 && n< 0.30){\n                        g.setColor(HILLS);\n                        map.put(\"HILLS\",new MyCoord(j,i));\n                    }\n                    // Floors (or Planes)\n                    else if (n >= 0.30 && n < 0.40)\n                    {\n                        g.setColor(DESERT);\n                        map.put(\"DESERT\",new MyCoord(j,i));\n\n                    }\n                    else if (n >= 0.40 && n < 0.5)\n                    {\n                        g.setColor(LAKE);\n                        map.put(\"LAKE\",new MyCoord(j,i));\n                    }\n                    else if (n >= 0.5 && n < 0.70)\n                    {\n                        g.setColor(PLAINS);\n                        map.put(\"PLAINS\",new MyCoord(j,i));\n                    }\n                    else if (n >= 0.70 && n < 0.75)\n                    {\n                        g.setColor(FOREST);\n                        map.put(\"FOREST\",new MyCoord(j,i));\n                    }\n                    // Walls (or Mountains)\n                    else if (n >= 0.75 && n < 0.85)\n                    {\n                        g.setColor(Color.GRAY);\n                        map.put(\"MOUNTAINS\",new MyCoord(j,i));\n                    }\n                    // Ice (or Snow)\n                    else\n                    {\n                        g.setColor(Color.white);\n                        map.put(\"SNOW\",new MyCoord(j,i));\n                    }\n                    g.fillRect(i * 10, j * 10, 10, 10);\n                    MyCoord coord =map.get(\"FOREST\");\n\n                   // System.out.println(coord.getX() +\" : \"+coord.getY());\n                }\n            }\n\n\n\n            for (int i = 0; i < walls.size(); i++) {\n                int x1 = walls.get(i).getX1()*7 ;\n                int x2 = walls.get(i).getX2()*7 ;\n                int y1 = walls.get(i).getY1()*7 ;\n                int y2 = walls.get(i).getY2()*7 ;\n\n                int x = Math.min(x1,x2);\n                int y = Math.min(y1,y2) ;\n                int width = Math.abs(x1-x2) ;\n                int height = Math.abs(y1-y2) ;\n\n                g.setColor(Color.black);\n                g.drawRect(x,y,width,height);\n                g.fillRect(x,y,width,height);\n\n            }\n\n            for (int i = 0; i < telePortals.size(); i++) {\n                int x1 = telePortals.get(i).getX1()*7 ;\n                int x2 = telePortals.get(i).getX2()*7 ;\n                int y1 = telePortals.get(i).getY1()*7 ;\n                int y2 = telePortals.get(i).getY2()*7 ;\n\n                int x = Math.min(x1,x2);\n                int y = Math.min(y1,y2) ;\n                int width = Math.abs(x1-x2) ;\n                int height = Math.abs(y1-y2) ;\n\n                g.setColor(Color.cyan);\n                g.drawRect(x,y,width,height);\n                g.fillRect(x,y,width,height);\n\n            }\n\n            for (int i = 0; i < shaded.size(); i++) {\n                int x1 = shaded.get(i).getX1()*7 ;\n                int x2 = shaded.get(i).getX2()*7 ;\n                int y1 = shaded.get(i).getY1()*7 ;\n                int y2 = shaded.get(i).getY2()*7 ;\n\n                int x = Math.min(x1,x2);\n                int y = Math.min(y1,y2) ;\n                int width = Math.abs(x1-x2) ;\n                int height = Math.abs(y1-y2) ;\n\n                g.setColor(Color.DARK_GRAY);\n                g.drawRect(x,y,width,height);\n                g.fillRect(x,y,width,height);\n\n            }\n\n            Area targetArea = scenario.targetArea;\n            int x1 = targetArea.getX1()*7 ;\n            int x2 = targetArea.getX2()*7 ;\n            int y1 = targetArea.getY1()*7 ;\n            int y2 = targetArea.getY2()*7 ;\n\n            int x = Math.min(x1,x2);\n            int y = Math.min(y1,y2) ;\n            int width = Math.abs(x1-x2) ;\n            int height = Math.abs(y1-y2) ;\n\n            g.setColor(Color.red);\n            g.drawRect(x,y,width,height);\n            g.fillRect(x,y,width,height);\n\n            Area spawnAreaIntruders = scenario.spawnAreaIntruders ;\n            x1 = spawnAreaIntruders.getX1()*7 ;\n            x2 = spawnAreaIntruders.getX2()*7 ;\n            y1 = spawnAreaIntruders.getY1()*7 ;\n            y2 = spawnAreaIntruders.getY2()*7 ;\n\n            x = Math.min(x1,x2);\n            y = Math.min(y1,y2) ;\n            width = Math.abs(x1-x2) ;\n            height = Math.abs(y1-y2) ;\n\n            g.setColor(Color.blue);\n            g.drawRect(x,y,width,height);\n            g.fillRect(x,y,width,height);\n\n\n            Area spawnAreaGuards = scenario.spawnAreaGuards;\n            x1 = spawnAreaGuards.getX1()*7 ;\n            x2 = spawnAreaGuards.getX2()*7 ;\n            y1 = spawnAreaGuards.getY1()*7 ;\n            y2 = spawnAreaGuards.getY2()*7 ;\n\n            x = Math.min(x1,x2);\n            y = Math.min(y1,y2) ;\n            width = Math.abs(x1-x2) ;\n            height = Math.abs(y1-y2) ;\n\n            g.setColor(Color.green);\n            g.drawRect(x,y,width,height);\n            g.fillRect(x,y,width,height);\n\n        }\n\n        private static double noise(double x, double y, double z)\n        {\n            // Find the unit cube that contains the point\n            int X = (int)Math.floor(x) & 255;\n            int Y = (int)Math.floor(y) & 255;\n            int Z = (int)Math.floor(z) & 255;\n\n            // Find relative x, y,z of point in cube\n            x -= Math.floor(x);\n            y -= Math.floor(y);\n            z -= Math.floor(z);\n\n            // Compute fade curves for each of x, y, z\n            double u = fade(x);\n            double v = fade(y);\n            double w = fade(z);\n\n            // Hash coordinates of the 8 cube corners\n            int A = p[X] + Y;\n            int AA = p[A] + Z;\n            int AB = p[A + 1] + Z;\n            int B = p[X + 1] + Y;\n            int BA = p[B] + Z;\n            int BB = p[B + 1] + Z;\n\n            // Add blended results from 8 corners of cube\n            double res = lerp(\n                    w,\n                    lerp(v, lerp(u, grad(p[AA], x, y, z), grad(p[BA], x - 1, y, z)),\n                            lerp(u, grad(p[AB], x, y - 1, z), grad(p[BB], x - 1, y - 1, z))),\n                    lerp(v, lerp(u, grad(p[AA + 1], x, y, z - 1), grad(p[BA + 1], x - 1, y, z - 1)),\n                            lerp(u, grad(p[AB + 1], x, y - 1, z - 1), grad(p[BB + 1], x - 1, y - 1, z - 1))));\n            return (res + 1.0) / 2.0;\n        }\n\n        private static double fade(double t)\n        {\n            return t * t * t * (t * (t * 6 - 15) + 10);\n        }\n\n        private static double lerp(double t, double a, double b)\n        {\n            return a + t * (b - a);\n        }\n\n        private static double grad(int hash, double x, double y, double z)\n        {\n            int h = hash & 15; // CONVERT LO 4 BITS OF HASH CODE\n            double u = h < 8 ? x : y, // INTO 12 GRADIENT DIRECTIONS.\n                    v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n            return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n        }\n\n        private static final int p[] = new int[512];\n\n        private static final int permutation[] = { 151, 160, 137, 91, 90, 15,\n                131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n                190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n                88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n                77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n                102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n                135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n                5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n                223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n                129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n                251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n                49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n                138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180\n        };\n\n        static\n        {\n            for (int i = 0; i < 256; i++)\n                p[256 + i] = p[i] = permutation[i];\n        }\n\n    }\n\n\n\n\n\n\n\n    }\n\n\n\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- project_group11/terraingenerator.java	(revision 8d08ecd05218dec2b74c82d79e94f7fdce517a9a)
+++ project_group11/terraingenerator.java	(date 1644538871021)
@@ -87,7 +87,8 @@
             this.width = width;
             this.z = z;
         }
-        public static  List<Point> Terrain_mapper (){
+        public static  List<Point> Terrain_mapper (String terraintype) {
+            List<Point> pointsempty = new ArrayList<>();
             List<Point> FOREST_points = new ArrayList<>();
             List<Point> HILLs_points = new ArrayList<>();
             List<Point> Desert_points = new ArrayList<>();
@@ -95,63 +96,73 @@
             List<Point> MOUNTAINS_points = new ArrayList<>();
             List<Point> PLAINS_points = new ArrayList<>();
             List<Point> SNOW_points = new ArrayList<>();
-         for (int i = 0; i < width; ++i)
-             { // y
+            for (int i = 0; i < width; ++i) { // y
                 for (int j = 0; j < height; ++j) { // x
                     double x = (double) j / ((double) width);
                     double y = (double) i / ((double) height);
                     double n = noise(10 * x, 10 * y, z);
 
 
-            if (n < 0.25) {
-                // FOREST
-                FOREST_points.add(new Point(j,i));
-                System.out.println("forestpoints:"+FOREST_points.size());
+                    if (n < 0.25) {
+                        // FOREST
+                        FOREST_points.add(new Point(j, i));
+                        //System.out.println("forestpoints:" + FOREST_points.size());
 
 
-            } else if (n >= 0.25 && n < 0.30) {
-               // HILLS
-                HILLs_points.add(new Point(j,i));
-            }
-            // DESERT
-            else if (n >= 0.30 && n < 0.40) {
+                    } else if (n >= 0.25 && n < 0.30) {
+                        // HILLS
+                        HILLs_points.add(new Point(j, i));
+                    }
+                    // DESERT
+                    else if (n >= 0.30 && n < 0.40) {
 
-                Desert_points.add(new Point(j,i));
+                        Desert_points.add(new Point(j, i));
 
 
-            } else if (n >= 0.40 && n < 0.5) {
-              //LAKE
-                LAKE_points.add(new Point(j,i));
-            } else if (n >= 0.5 && n < 0.70) {
-                // PLAINS
-                PLAINS_points.add(new Point(j,i));
-            } else if (n >= 0.70 && n < 0.75) {
-                // FOREST
-                FOREST_points.add(new Point(j,i));
-            }
-            // MOUNTAINS
-            else if (n >= 0.75 && n < 0.85) {
+                    } else if (n >= 0.40 && n < 0.5) {
+                        //LAKE
+                        LAKE_points.add(new Point(j, i));
+                    } else if (n >= 0.5 && n < 0.70) {
+                        // PLAINS
+                        PLAINS_points.add(new Point(j, i));
+                    } else if (n >= 0.70 && n < 0.75) {
+                        // FOREST
+                        FOREST_points.add(new Point(j, i));
+                    }
+                    // MOUNTAINS
+                    else if (n >= 0.75 && n < 0.85) {
 
-                MOUNTAINS_points.add(new Point(j,i));
-            }
-            // Ice (or Snow)
-            else {
+                        MOUNTAINS_points.add(new Point(j, i));
+                    }
+                    // Ice (or Snow)
+                    else {
 
-                SNOW_points.add(new Point(j,i));
-                System.out.println("Snowpoints:"+SNOW_points.size());
-            }
-        }
-    }
+                        SNOW_points.add(new Point(j, i));
+                        //System.out.println("Snowpoints:" + SNOW_points.size());
+                    }
+                }
+            }
+            if (terraintype == "FOREST")
+                return FOREST_points;
+            if (terraintype == "LAKE")
+                return LAKE_points;
+            if (terraintype == "MOUNTAINS")
+                return MOUNTAINS_points;
+            if (terraintype == "PLAINS")
+                return PLAINS_points;
+            if (terraintype == "SNOW")
+                return SNOW_points;
+            if (terraintype == "DESERT")
+                return Desert_points;
 
-       return SNOW_points; }
+        return pointsempty;}
+
 
 
 
         public static void main(String[] args)
         {
-            List<Point> points = new ArrayList<>();
-            points.add(new Point (1,2));
-            points.toString();
+
 
 
             int height = DEFAULT_HEIGHT;
@@ -169,8 +180,19 @@
             //System.out.println(snowpoints.size());
 
             Map terrain = new Map(height, width, z);
-            List<Point> snow = Map.Terrain_mapper();
-            System.out.println(snow.size());
+            List<Point> snow = Map.Terrain_mapper("SNOW");
+            List<Point> Plains = Map.Terrain_mapper("PLAINS");
+            List<Point> Desert = Map.Terrain_mapper("DESERT");
+            List<Point> Forest = Map.Terrain_mapper("FOREST");
+            List<Point> Lake = Map.Terrain_mapper("LAKE");
+            List<Point> Mountains = Map.Terrain_mapper("MOUNTAINS");
+
+            System.out.println("SNOW SIZE:"+snow.size());
+            System.out.println("PLAINS SIZE:"+Plains.size());
+            System.out.println("DESERT SIZE:"+Desert.size());
+            System.out.println("FOREST SIZE:"+Forest.size());
+            System.out.println("LAKE SIZE:"+Lake.size());
+            System.out.println("Mountains SIZE:"+Mountains.size());
 
 
             Random rand = new Random(seed);
@@ -350,6 +372,7 @@
             height = Math.abs(y1-y2) ;
 
             g.setColor(Color.green);
+
             g.drawRect(x,y,width,height);
             g.fillRect(x,y,width,height);
 
